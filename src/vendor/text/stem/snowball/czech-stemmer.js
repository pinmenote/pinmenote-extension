// Generated by Snowball 2.2.0 - https://snowballstem.org/
import {BaseStemmer} from "./base-stemmer";

/**@constructor*/
export const CzechStemmer = function() {
    const base = new BaseStemmer();
    /** @const */ const a_0 = [
        ["ce", -1, 1],
        ["ze", -1, 2],
        ["\u017Ee", -1, 2],
        ["ci", -1, 1],
        ["\u010Dti", -1, 3],
        ["\u0161ti", -1, 4],
        ["zi", -1, 2],
        ["\u010Di", -1, 1],
        ["\u017Ei", -1, 2],
        ["\u010Dt\u00E9", -1, 3],
        ["\u0161t\u00E9", -1, 4],
        ["\u010D", -1, 1],
        ["\u010Dt\u011B", -1, 3],
        ["\u0161t\u011B", -1, 4]
    ];

    /** @const */ const a_1 = [
        ["in", -1, 2],
        ["ov", -1, 1],
        ["\u016Fv", -1, 1]
    ];

    /** @const */ const a_2 = [
        ["a", -1, 1],
        ["ama", 0, 1],
        ["ata", 0, 1],
        ["e", -1, 2],
        ["\u011Bte", 3, 2],
        ["ech", -1, 2],
        ["atech", 5, 1],
        ["ich", -1, 2],
        ["\u00E1ch", -1, 1],
        ["\u00EDch", -1, 2],
        ["\u00FDch", -1, 1],
        ["i", -1, 2],
        ["mi", 11, 1],
        ["ami", 12, 1],
        ["emi", 12, 2],
        ["\u00EDmi", 12, 2],
        ["\u00FDmi", 12, 1],
        ["\u011Bmi", 12, 2],
        ["\u011Bti", 11, 2],
        ["ovi", 11, 1],
        ["em", -1, 3],
        ["\u011Btem", 20, 1],
        ["\u00E1m", -1, 1],
        ["\u00E9m", -1, 2],
        ["\u00EDm", -1, 2],
        ["\u00FDm", -1, 1],
        ["at\u016Fm", -1, 1],
        ["o", -1, 1],
        ["iho", 27, 2],
        ["\u00E9ho", 27, 2],
        ["\u00EDho", 27, 2],
        ["es", -1, 2],
        ["os", -1, 1],
        ["us", -1, 1],
        ["at", -1, 1],
        ["u", -1, 1],
        ["imu", 35, 2],
        ["\u00E9mu", 35, 2],
        ["ou", 35, 1],
        ["y", -1, 1],
        ["aty", 39, 1],
        ["\u00E1", -1, 1],
        ["\u00E9", -1, 1],
        ["ov\u00E9", 42, 1],
        ["\u00ED", -1, 2],
        ["\u00FD", -1, 1],
        ["\u011B", -1, 2],
        ["\u016F", -1, 1]
    ];

    /** @const */ const a_3 = [
        ["ob", -1, 1],
        ["itb", -1, 2],
        ["ec", -1, 3],
        ["inec", 2, 2],
        ["obinec", 3, 1],
        ["ovec", 2, 1],
        ["ic", -1, 2],
        ["enic", 6, 3],
        ["och", -1, 1],
        ["\u00E1sek", -1, 1],
        ["nk", -1, 1],
        ["isk", -1, 2],
        ["ovisk", 11, 1],
        ["tk", -1, 1],
        ["vk", -1, 1],
        ["n\u00EDk", -1, 1],
        ["ovn\u00EDk", 15, 1],
        ["ov\u00EDk", -1, 1],
        ["\u010Dk", -1, 1],
        ["i\u0161k", -1, 2],
        ["u\u0161k", -1, 1],
        ["dl", -1, 1],
        ["itel", -1, 2],
        ["ul", -1, 1],
        ["an", -1, 1],
        ["\u010Dan", 24, 1],
        ["en", -1, 3],
        ["in", -1, 2],
        ["\u0161tin", 27, 1],
        ["ovin", 27, 1],
        ["teln", -1, 1],
        ["\u00E1rn", -1, 1],
        ["\u00EDrn", -1, 6],
        ["oun", -1, 1],
        ["loun", 33, 1],
        ["ovn", -1, 1],
        ["yn", -1, 1],
        ["kyn", 36, 1],
        ["\u00E1n", -1, 1],
        ["i\u00E1n", 38, 2],
        ["\u00EDn", -1, 6],
        ["\u010Dn", -1, 1],
        ["\u011Bn", -1, 5],
        ["as", -1, 1],
        ["it", -1, 2],
        ["ot", -1, 1],
        ["ist", -1, 2],
        ["ost", -1, 1],
        ["nost", 47, 1],
        ["out", -1, 1],
        ["ovi\u0161t", -1, 1],
        ["iv", -1, 2],
        ["ov", -1, 1],
        ["tv", -1, 1],
        ["ctv", 53, 1],
        ["stv", 53, 1],
        ["ovstv", 55, 1],
        ["ovtv", 53, 1],
        ["a\u010D", -1, 1],
        ["\u00E1\u010D", -1, 1],
        ["o\u0148", -1, 1],
        ["\u00E1\u0159", -1, 1],
        ["k\u00E1\u0159", 61, 1],
        ["ion\u00E1\u0159", 61, 2],
        ["\u00E9\u0159", -1, 4],
        ["n\u00E9\u0159", 64, 1],
        ["\u00ED\u0159", -1, 6],
        ["ou\u0161", -1, 1]
    ];

    /** @const */ const a_4 = [
        ["c", -1, 1],
        ["k", -1, 1],
        ["l", -1, 1],
        ["n", -1, 1],
        ["t", -1, 1],
        ["\u010D", -1, 1]
    ];

    /** @const */ const a_5 = [
        ["isk", -1, 2],
        ["\u00E1k", -1, 1],
        ["izn", -1, 2],
        ["ajzn", -1, 1]
    ];

    /** @const */ const a_6 = [
        ["k", -1, 1],
        ["ak", 0, 7],
        ["ek", 0, 2],
        ["anek", 2, 1],
        ["enek", 2, 2],
        ["inek", 2, 4],
        ["onek", 2, 1],
        ["unek", 2, 1],
        ["\u00E1nek", 2, 1],
        ["a\u010Dek", 2, 1],
        ["e\u010Dek", 2, 2],
        ["i\u010Dek", 2, 4],
        ["o\u010Dek", 2, 1],
        ["u\u010Dek", 2, 1],
        ["\u00E1\u010Dek", 2, 1],
        ["\u00E9\u010Dek", 2, 3],
        ["\u00ED\u010Dek", 2, 5],
        ["ou\u0161ek", 2, 1],
        ["ik", 0, 4],
        ["ank", 0, 1],
        ["enk", 0, 1],
        ["ink", 0, 1],
        ["onk", 0, 1],
        ["unk", 0, 1],
        ["\u00E1nk", 0, 1],
        ["\u00E9nk", 0, 1],
        ["\u00EDnk", 0, 1],
        ["ok", 0, 8],
        ["\u00E1tk", 0, 1],
        ["uk", 0, 9],
        ["\u00E1k", 0, 6],
        ["\u00E9k", 0, 3],
        ["\u00EDk", 0, 5],
        ["a\u010Dk", 0, 1],
        ["e\u010Dk", 0, 1],
        ["i\u010Dk", 0, 1],
        ["o\u010Dk", 0, 1],
        ["u\u010Dk", 0, 1],
        ["\u00E1\u010Dk", 0, 1],
        ["\u00E9\u010Dk", 0, 1],
        ["\u00ED\u010Dk", 0, 1],
        ["u\u0161k", 0, 1]
    ];

    /** @const */ const a_7 = [
        ["ej\u0161", -1, 2],
        ["\u011Bj\u0161", -1, 1]
    ];

    /** @const */ const /** Array<int> */ g_v = [17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 18, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64];

    let /** number */ I_p1 = 0;
    let /** number */ I_pV = 0;


    /** @return {boolean} */
    function r_mark_regions() {
        I_pV = base.limit;
        I_p1 = base.limit;
        let /** number */ v_1 = base.cursor;
        lab0: {
            golab1: while(true)
            {
                lab2: {
                    if (!(base.out_grouping(g_v, 97, 367)))
                    {
                        break lab2;
                    }
                    break golab1;
                }
                if (base.cursor >= base.limit)
                {
                    break lab0;
                }
                base.cursor++;
            }
            I_pV = base.cursor;
            golab3: while(true)
            {
                lab4: {
                    if (!(base.out_grouping(g_v, 97, 367)))
                    {
                        break lab4;
                    }
                    break golab3;
                }
                if (base.cursor >= base.limit)
                {
                    break lab0;
                }
                base.cursor++;
            }
            golab5: while(true)
            {
                lab6: {
                    if (!(base.in_grouping(g_v, 97, 367)))
                    {
                        break lab6;
                    }
                    break golab5;
                }
                if (base.cursor >= base.limit)
                {
                    break lab0;
                }
                base.cursor++;
            }
            I_p1 = base.cursor;
        }
        base.cursor = v_1;
        return true;
    };

    /** @return {boolean} */
    function r_RV() {
        if (!(I_pV <= base.cursor))
        {
            return false;
        }
        return true;
    };

    /** @return {boolean} */
    function r_R1() {
        if (!(I_p1 <= base.cursor))
        {
            return false;
        }
        return true;
    };

    /** @return {boolean} */
    function r_palatalise() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_0);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        if (!r_RV())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                if (!base.slice_from("k"))
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_from("h"))
                {
                    return false;
                }
                break;
            case 3:
                if (!base.slice_from("ck"))
                {
                    return false;
                }
                break;
            case 4:
                if (!base.slice_from("sk"))
                {
                    return false;
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_possessive() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_1);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        if (!r_RV())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                if (!base.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_del())
                {
                    return false;
                }
                let /** number */ v_1 = base.limit - base.cursor;
                lab0: {
                    if (!r_palatalise())
                    {
                        base.cursor = base.limit - v_1;
                        break lab0;
                    }
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_case() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_2);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        switch (among_var) {
            case 1:
                if (!base.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_del())
                {
                    return false;
                }
                let /** number */ v_1 = base.limit - base.cursor;
                lab0: {
                    if (!r_palatalise())
                    {
                        base.cursor = base.limit - v_1;
                        break lab0;
                    }
                }
                break;
            case 3:
                if (!base.slice_from("e"))
                {
                    return false;
                }
                let /** number */ v_2 = base.limit - base.cursor;
                lab1: {
                    if (!r_palatalise())
                    {
                        base.cursor = base.limit - v_2;
                        break lab1;
                    }
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_derivational() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_3);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        if (!r_R1())
        {
            return false;
        }
        switch (among_var) {
            case 1:
                if (!base.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_from("i"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 3:
                if (!base.slice_from("e"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 4:
                if (!base.slice_from("\u00E9"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 5:
                if (!base.slice_from("\u011B"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 6:
                if (!base.slice_from("\u00ED"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_deriv_single() {
        base.ket = base.cursor;
        if (base.find_among_b(a_4) === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        if (!base.slice_del())
        {
            return false;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_augmentative() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_5);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        switch (among_var) {
            case 1:
                if (!base.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_from("i"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_diminutive() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_6);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        switch (among_var) {
            case 1:
                if (!base.slice_del())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_from("e"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 3:
                if (!base.slice_from("\u00E9"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 4:
                if (!base.slice_from("i"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 5:
                if (!base.slice_from("\u00ED"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 6:
                if (!base.slice_from("\u00E1"))
                {
                    return false;
                }
                break;
            case 7:
                if (!base.slice_from("a"))
                {
                    return false;
                }
                break;
            case 8:
                if (!base.slice_from("o"))
                {
                    return false;
                }
                break;
            case 9:
                if (!base.slice_from("u"))
                {
                    return false;
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_comparative() {
        let /** number */ among_var;
        base.ket = base.cursor;
        among_var = base.find_among_b(a_7);
        if (among_var === 0)
        {
            return false;
        }
        base.bra = base.cursor;
        switch (among_var) {
            case 1:
                if (!base.slice_from("\u011B"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
            case 2:
                if (!base.slice_from("e"))
                {
                    return false;
                }
                if (!r_palatalise())
                {
                    return false;
                }
                break;
        }
        return true;
    };

    /** @return {boolean} */
    function r_do_aggressive() {
        let /** number */ v_1 = base.limit - base.cursor;
        r_do_comparative();
        base.cursor = base.limit - v_1;
        let /** number */ v_2 = base.limit - base.cursor;
        r_do_diminutive();
        base.cursor = base.limit - v_2;
        let /** number */ v_3 = base.limit - base.cursor;
        r_do_augmentative();
        base.cursor = base.limit - v_3;
        lab0: {
            let /** number */ v_4 = base.limit - base.cursor;
            lab1: {
                if (!r_do_derivational())
                {
                    break lab1;
                }
                break lab0;
            }
            base.cursor = base.limit - v_4;
            if (!r_do_deriv_single())
            {
                return false;
            }
        }
        return true;
    };

    this.stem = /** @return {boolean} */ function() {
        r_mark_regions();
        base.limit_backward = base.cursor; base.cursor = base.limit;
        if (!r_do_case())
        {
            return false;
        }
        if (!r_do_possessive())
        {
            return false;
        }
        if (!r_do_aggressive())
        {
            return false;
        }
        base.cursor = base.limit_backward;
        return true;
    };

    /**@return{string}*/
    this['stemWord'] = function(/**string*/word) {
        base.setCurrent(word);
        this.stem();
        return base.getCurrent();
    };
};
